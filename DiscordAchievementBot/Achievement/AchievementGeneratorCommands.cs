using Discord.Commands;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace DiscordAchievementBot
{
    [Group(""), Remarks("Commands for Achievement Generator.")]
    public class AchievementGeneratorCommands : ModuleBase
    {
        //todo add proper help command
        [Command("Get", RunMode = RunMode.Async), Alias("Generate")]
        public async Task Get(string achievementName, int gamerScore, AchievementType type = AchievementType.XboxOne)
        {
            //Console.WriteLine("Get");

            bool workInProgress = type == AchievementType.Xbox360 || type == AchievementType.XboxOneRare;
            if (workInProgress)
                type = AchievementType.XboxOne;

            Discord.IUserMessage ack = await ReplyAsync("Right away, " + Context.User.Mention + "!");

            //todo add permissions for this. possibly limit only to users who have a role on the server
            string filePath = Program.GlobalConfig.Data.ImageTemporaryDirectory + "aaa" + ".png";
            filePath = Environment.ExpandEnvironmentVariables(filePath);

            ImageGeneration.GenerateImage(achievementName, gamerScore, type, filePath);

            // remove the ack once file has been generated

            // gotta be a better way for this
            List<Discord.IUserMessage> del = new List<Discord.IUserMessage>();
            del.Add(ack);

            await Context.Channel.DeleteMessagesAsync(del);

            string prefix = "";
            if(workInProgress)
            {
                prefix = "That one is a work in progress.\n";
            }

            await Context.Channel.SendFileAsync(filePath, prefix + "Generated by " + Context.User.Mention + ".");
        }



        /// <summary>
        /// Ping/Pong Command
        /// Replies back instantly with "Pong!"
        /// </summary>
        /// <returns></returns>
        [Command("Ping", RunMode = RunMode.Async), 
            RequireContext(ContextType.Guild),
            Remarks("A simple ping/pong test command."),
            Priority(0) ]
        public async Task Ping()
        {
            /*
            * RequireUserPermission(Discord.GuildPermission.Administrator)
            * RequireUserPermission(Discord.GuildPermission.ManageChannels)
            */
            await ReplyAsync("Pong!");
        }

        [Command("InviteLink", RunMode = RunMode.Async), Alias("Invite"), RequireContext(ContextType.Guild)]
        public async Task GetInviteLink()
        {
            string link = string.Format(@"Invite URL: <https://discordapp.com/oauth2/authorize?client_id={0}&scope=bot>", Context.Client.CurrentUser.Id);
            await ReplyAsync(link);
        }

        [Command("About", RunMode = RunMode.Async), Alias("GitHub")]
        public async Task About()
        {
            string aboutText =
                string.Format("Discord Achievement Bot\nhttps://github.com/Chris-Johnston/DiscordAchievementBot");
            await ReplyAsync(aboutText);
        }
    }
}
